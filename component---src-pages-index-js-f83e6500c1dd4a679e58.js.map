{"version":3,"sources":["webpack:///./src/components/seo/seo.js","webpack:///./src/pages/index.js"],"names":["SEO","description","lang","meta","title","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","data","allMarkdownRemark","edges","map","node","key","id","to","fields","slug","frontmatter","Date","date","toDateString","excerpt","query"],"mappings":"uJAYA,SAASA,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BC,EADuC,OACvCA,KAcFC,EAAkBL,GAAeI,EAAKE,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFE,MAAOA,EACPK,cAAa,QAAUJ,EAAKE,aAAaH,MACzCD,KAAM,CACJ,CACEO,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASP,GAEX,CACEQ,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASP,GAEX,CACEM,KAAK,sBACLC,QAASL,IAEXQ,OAAOX,KAKfH,EAAIe,aAAe,CACjBb,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,O,kCCvFf,0GAQe,0BAAGgB,EAAH,EAAGA,KAAH,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKZ,MAAM,SAERY,EAAKC,kBAAkBC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAChC,yBAAKC,IAAKD,EAAKE,IACb,kBAAC,IAAD,CAAUC,GAAIH,EAAKI,OAAOC,MACxB,kBAAC,IAAD,KAAYL,EAAKM,YAAYtB,QAE/B,8BAAO,IAAIuB,KAAKP,EAAKM,YAAYE,MAAMC,gBACvC,2BAAIT,EAAKU,eAOZ,IAAMC,EAAK","file":"component---src-pages-index-js-f83e6500c1dd4a679e58.js","sourcesContent":["/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Helmet from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout/layout\"\r\nimport SEO from \"../components/seo/seo\"\r\n\r\nimport { BlogLink, BlogTitle } from \"../styled-components/index\"\r\n\r\nexport default ({ data }) => (\r\n  <Layout>\r\n    <SEO title=\"Home\" />\r\n    {\r\n       data.allMarkdownRemark.edges.map(({ node }) => (\r\n        <div key={node.id}>\r\n          <BlogLink to={node.fields.slug}>\r\n            <BlogTitle>{node.frontmatter.title}</BlogTitle>\r\n          </BlogLink>\r\n          <time>{new Date(node.frontmatter.date).toDateString()}</time>\r\n          <p>{node.excerpt}</p>\r\n        </div>\r\n      ))\r\n    }\r\n  </Layout>\r\n)\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n    totalCount\r\n    edges {\r\n      node {\r\n        id\r\n        frontmatter {\r\n          date\r\n          title\r\n          description\r\n        }\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`;"],"sourceRoot":""}